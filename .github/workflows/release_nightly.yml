# Release Nightly (build-only, upload artifacts â€” based on upstream ruffle-rs/ruffle release_nightly)
name: Release Nightly

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  # Intent: indicate desired glibc baseline (informational only)
  GLIBC_VERSION: "2.35"
  RELEASE_SCRIPT: ./.github/scripts/release.py

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-24.04
    outputs:
      is_active: ${{ steps.activity.outputs.is_active }}
      date: ${{ steps.current_time_underscores.outputs.formattedTime }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for repo activity
        id: activity
        run: |
          # Skip activity check when manually triggered.
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            is_active=true
          elif [ "$(git rev-list --after="24 hours" HEAD)" ]; then
            is_active=true
          else
            is_active=false
          fi
          echo "is_active=$is_active" >> $GITHUB_OUTPUT

      - name: Get current time with underscores
        uses: josStorer/get-current-time@v2.1.2
        id: current_time_underscores
        with:
          format: YYYY_MM_DD

  build:
    name: Build ${{ matrix.build_name }}
    needs: prepare
    if: needs.prepare.outputs.is_active == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - build_name: linux-x86_64
            os: ubuntu-24.04

          - build_name: linux-aarch64
            os: ubuntu-24.04-arm

          - build_name: macos-x86_64
            os: macos-15
            target: x86_64-apple-darwin
            MACOSX_DEPLOYMENT_TARGET: 10.7
            DESKTOP_FEATURES: sandbox,jpegxr

          - build_name: macos-aarch64
            os: macos-15
            target: aarch64-apple-darwin
            MACOSX_DEPLOYMENT_TARGET: 11.0
            DESKTOP_FEATURES: sandbox,jpegxr

          - build_name: windows-x86_32
            os: windows-2025
            target: i686-pc-windows-msvc
            RUSTFLAGS: -Ctarget-feature=+crt-static
            DESKTOP_FEATURES: jpegxr
            MSI_ARCH: x86

          - build_name: windows-x86_64
            os: windows-2025
            target: x86_64-pc-windows-msvc
            RUSTFLAGS: -Ctarget-feature=+crt-static
            DESKTOP_FEATURES: jpegxr
            MSI_ARCH: x64

    env:
      PACKAGE_FILE: ${{ needs.prepare.outputs.date }}-${{ matrix.build_name }}.${{ startsWith(matrix.build_name, 'win') && 'zip' || 'tar.gz' }}
      CARGO_BUILD_DIR: target/${{ matrix.target }}/release

    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone repo at default branch
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt install -y libasound2-dev libudev-dev

      - name: Install WiX
        if: runner.os == 'Windows'
        run: |
          dotnet tool install --global wix --version 5.0.2
          wix extension add -g WixToolset.UI.wixext/5.0.2
          wix extension add -g WixToolset.Util.wixext/5.0.2

      - name: Debug - verify runner, pkg-config and glibc info
        run: |
          echo "Runner OS: $RUNNER_OS"
          uname -a || true
          lsb_release -a || true
          echo "Which pkg-config:"
          which pkg-config || true
          echo "pkg-config --version:"
          pkg-config --version || true
          echo "dpkg list libasound:"
          dpkg -l | grep libasound || true
          echo "ldd / glibc version:"
          ldd --version || true

      - name: Cargo build
        run: cargo build --locked --package ruffle_desktop --release ${{matrix.DESKTOP_FEATURES && '--features' }} ${{matrix.DESKTOP_FEATURES}} ${{ matrix.target && '--target' }} ${{ matrix.target }}
        env:
          CFG_RELEASE_CHANNEL: nightly
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.MACOSX_DEPLOYMENT_TARGET }}

      - name: Package common
        run: |
          mkdir -p package
          cp README.md package/README.md || true
          cp LICENSE.md package/LICENSE.md || true

      - name: Package MSI
        if: runner.os == 'Windows'
        run: |
          cd desktop/packages/windows/wix
          wix build ruffle.wxs -ext WixToolset.UI.wixext -ext WixToolset.Util.wixext -arch ${{ matrix.MSI_ARCH }} -o ../../../../package/setup.msi -pdbtype none
        env:
          CARGO_BUILD_DIR: ../../../../target/${{ matrix.target }}/release

      - name: Package Windows
        if: runner.os == 'Windows'
        run: |
          cp ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop.exe package/ruffle.exe
          7z a "${{ env.PACKAGE_FILE }}" ./package/*
        env:
          PACKAGE_FILE: ${{ env.PACKAGE_FILE }}

      - name: Package Linux
        if: runner.os == 'Linux'
        run: |
          cp ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop package/ruffle || true

          # Package extras
          mkdir -p package/extras
          cp desktop/packages/linux/rs.ruffle.Ruffle.desktop package/extras || true
          cp desktop/packages/linux/rs.ruffle.Ruffle.metainfo.xml package/extras || true
          cp desktop/packages/linux/rs.ruffle.Ruffle.svg package/extras || true

          # Create a flat tarball (without a top-level directory).
          cd package
          tar -czvf ../"${{ env.PACKAGE_FILE }}" *
        env:
          PACKAGE_FILE: ${{ env.PACKAGE_FILE }}

      - name: Upload package artifact (linux/windows)
        if: runner.os != 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_name }}
          path: ${{ env.PACKAGE_FILE }}

      - name: Build Safari Web Extension stub binary
        if: runner.os == 'macOS'
        run: cargo build --locked --package ruffle_web_safari --release ${{ matrix.target && '--target' }} ${{ matrix.target }}
        env:
          CFG_RELEASE_CHANNEL: nightly
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.MACOSX_DEPLOYMENT_TARGET }}

      - name: Upload macOS build artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_name }}
          path: |
            ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop
            ${{ env.CARGO_BUILD_DIR }}/ruffle_web_safari
            package

  build-mac-universal-binary:
    name: Build macOS universal binary
    needs: [prepare, build]
    runs-on: macos-15
    if: needs.prepare.outputs.is_active == 'true'
    env:
      PACKAGE_FILE: ${{ needs.prepare.outputs.date }}-macos-universal.tar.gz
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download aarch64 binary
        uses: actions/download-artifact@v5
        with:
          name: macos-aarch64

      - name: Download x86_64 binary
        uses: actions/download-artifact@v5
        with:
          name: macos-x86_64

      - name: Make universal desktop binary
        run: |
          mkdir -p package
          lipo -create -output package/ruffle target/x86_64-apple-darwin/release/ruffle_desktop target/aarch64-apple-darwin/release/ruffle_desktop
          chmod +x package/ruffle

      - name: Make universal Safari stub binary
        continue-on-error: true
        run: |
          lipo -create -output package/ruffle_web_safari target/x86_64-apple-darwin/release/ruffle_web_safari target/aarch64-apple-darwin/release/ruffle_web_safari || true
          chmod +x package/ruffle_web_safari || true

      - name: Create app bundle skeleton
        run: |
          cp -r desktop/packages/macOS package/Ruffle.app || true
          mkdir -p package/Ruffle.app/Contents/MacOS
          mv package/ruffle package/Ruffle.app/Contents/MacOS/ruffle || true

      - name: Package macOS universal
        run: |
          cd package
          tar -czvf ../"${{ env.PACKAGE_FILE }}" *

      - name: Upload macOS universal artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: ${{ env.PACKAGE_FILE }}

  build-stub-report:
    name: Build AVM2 stub repository
    needs: prepare
    if: needs.prepare.outputs.is_active == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Generate report
        run: ./stub-report/generate-report.sh

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: avm2_report
          path: avm2_report.json

  build-browser-extensions:
    name: Build browser extensions
    needs: prepare
    if: needs.prepare.outputs.is_active == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown
          components: rust-src

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "24"
          registry-url: https://registry.npmjs.org

      - name: Install wasm-bindgen
        run: cargo install wasm-bindgen-cli --version 0.2.104

      - name: Install wasm-opt
        uses: sigoden/install-binary@v1
        with:
          repo: WebAssembly/binaryen
          tag: version_124
          name: wasm-opt

      - name: Install node packages
        working-directory: web
        shell: bash -l {0}
        run: npm ci

      - name: Seal version data (local)
        working-directory: web
        env:
          CFG_RELEASE_CHANNEL: nightly
          VERSION4: "nightly"
          ENABLE_VERSION_SEAL: "true"
        run: npm run version-seal

      - name: Build web (reproducible)
        working-directory: web
        env:
          CFG_RELEASE_CHANNEL: nightly
          VERSION4: "nightly"
          CARGO_FEATURES: jpegxr
          WASM_SOURCE: cargo_and_store
        run: npm run build:repro

      - name: Produce reproducible source archive
        run: |
          zip -r reproducible-source.zip . -x '/web/node_modules/*' '/web/*/node_modules/*' '/web/packages/*/dist/*' '/web/docker/docker_builds/packages/*' '/target/*' '/.git/*' '/tests/tests/swfs/*'
          mv reproducible-source.zip ../reproducible-source-web-${{ needs.prepare.outputs.date }}.zip

      - name: Upload reproducible source artifact
        uses: actions/upload-artifact@v4
        with:
          name: reproducible-source
          path: reproducible-source-web-${{ needs.prepare.outputs.date }}.zip

      - name: Copy web extension zip artifact and upload
        run: |
          cp ./web/packages/extension/dist/ruffle_extension.zip ./ruffle_extension-${{ needs.prepare.outputs.date }}.zip
        - name: Upload web extension artifact
          uses: actions/upload-artifact@v4
          with:
            name: web-extension
            path: ruffle_extension-${{ needs.prepare.outputs.date }}.zip
